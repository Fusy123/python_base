# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера  
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import bulls_engine as eng
from termcolor import cprint, colored


# TODO тут мы дописываем две функции:

# TODO Первая которая будет просить ввести число, будет обращаться у API за проверкой этого числа,
# TODO и выводить только что мы ввели верное число или неверное и просить ввести его заново!

# TODO логика проверки числа:
# TODO бесконечный цикл
# TODO если функция_проверки(число):
# TODO     принт вы ввели верное число
# TODO     выходим из цикла!
# TODO иначе
# TODO     вы ввели не корректное число!

# TODO Вторая как раз будет функция новая_игра() в ней мы совместим общение с пользователем если он выиграл
# TODO + попросим выбрать его будет ли он играть еще раз или выходим!


# TODO в главном цикле мы только вызываем нужные нам функции!
# TODO Алгоритм примерно такой:

# TODO просим_ввести_число_корректное() - функция 1
# TODO получаем данные из функции, которая чекает число на результат и возвращает словарь(в вашем случае числа)
# TODO печатаем этот результат, тут тоже вызов функции() и запись в переменную
# TODO увеличиваем число ходов - тут простой счетчик
# TODO условие на победу и новую иру в виде двух функций:
# TODO Если выиграли_игру(): - функция 3 в API о ней писал
# TODO    новая_игра() - функция 2


# TODO важно функции которые ведут диалог с пользователем в API быть не должно, там только логика и вычисления
# TODO объявляем их тут


def play_game():
    # TODO нужно разбить данную логику на блоки - функции, которые указаны выше в примерном алгоритме
    # TODO тут только должен быть вызов функций
    while True:
        # TODO после упрощения должно остаться 6 строк кода, из них вызов 4х функций
        cprint('Игра "Быки и коровы"', color='yellow')
        comp_number = eng.random_int()  # генератор случайного числа
        count_games = 0
        bulls, cows = 0, 0
        while bulls != 4:
            user_number = eng.user_input()  # ввод числа пользователем
            bulls, cows = eng.check_bulls_cows(comp_number, user_number)
            count_games += 1
            eng.games(bulls, cows)

        print(colored('Текущий счет игры: Быки -', color='green'), colored(bulls, color='yellow'),
              colored('Коровы -', color='red'), colored(cows, color='yellow'), end='.\n')
        cprint('Поздравляем! Вы угадали число!', color='green', attrs=['bold'])
        print(colored('Вы угадали за', color='green', attrs=['bold']),
              colored(count_games, color='green', attrs=['bold']),
              colored('попыток', color='green', attrs=['bold']))
        question = input('Хотите сыграть еще одну партию? (y/n)')
        if question.lower() == 'n':
            print('Игра окончена. Удачи!')
            break


play_game()

# TODO если у вас есть вопросы лучше уточните их заранее и верности вашего решения
