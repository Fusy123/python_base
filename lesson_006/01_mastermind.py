# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера  
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import bulls_engine as eng
from termcolor import cprint, colored


def play_game():
    cprint('Игра "Быки и коровы"', color='yellow')
    eng.random_int()  # генератор случайного числа
    count_games = 1
    # TODO давай те попробуем еще раз, код который у вас в цикле, просил разбить на логические
    # TODO блоки(функции) и вынести(объявить) их в этом модуле выше функции play_game
    while True:
        # TODO функция 1 - начало
        # TODO в отдельной функции мы пишем тоже цикл и выпускать будем из него когда будет
        # TODO введено валидное число.
        user_number = input(colored('Введите четырехзначное число (число не должно начинаться с нуля и содержать '
                                    'повторяющихся цифр): ', color='red'))
        # TODO обычно используют приставку not, так старайтесь не писать is False
        if eng.user_input(user_number) is False:
            cprint('Вы ввели неправильное число!', color='yellow')
            continue
        # TODO функция 1 - конец
        bulls, cows = eng.check_bulls_cows(user_number)
        if bulls != 4:
            # TODO этот код тоже можно вынести в отдельную функции а тут ее только вызвать.
            # TODO условие bulls != 4 можно проработать так чтобы не было else с принтами, но возможно
            # TODO уйти от else не получить при перезапуске игры.
            # TODO Тогда тут появиться возможность запускать функцию перезапуска игры, ее нужно будет
            # TODO объявить тоже в этом модуле! Движок пока что не трогаем.
            print(colored('Текущий счет игры: Быки -', color='red'), colored(bulls, color='yellow'),
                  colored('Коровы -', color='red'), colored(cows, color='yellow'), end='.\n')
            print('Вы не угадали. Попробуйте еще раз: ')
            count_games += 1
            continue
        else:
            print(colored('Текущий счет игры: Быки -', color='green'), colored(bulls, color='yellow'),
                  colored('Коровы -', color='red'), colored(cows, color='yellow'), end='.\n')
            print(colored('Поздравляем! Вы угадали за', color='green', attrs=['bold']),
                  colored(count_games, color='green', attrs=['bold']),
                  colored('попыток', color='green', attrs=['bold']))
            break


play_game()

question = input('Хотите сыграть еще одну партию? (y/n)')
if question.lower() == 'n':
    print('Игра окончена. Удачи!')
else:
    print('==' * 15)
    # TODO а если мы в третий раз будем играть ?
    play_game()
