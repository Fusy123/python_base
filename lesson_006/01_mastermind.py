# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера  
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


from bulls_engine import gather_herd, check, input_number
from termcolor import cprint

# TODO в главном цикле мы только вызываем нужные нам функции!
# TODO Алгоритм примерно такой:

# TODO просим_ввести_число_корректное()
# TODO получаем данные из функции, которая чекает число на результат и возвращает словарь
# TODO печатаем этот результат
# TODO увеличиваем число ходов
# TODO условие на победу и новую иру в виде двух функций:
# TODO Если выиграли_игру():
# TODO    новая_игра()

# TODO важно функции которые ведут диалог с пользователем в API быть не должно, там только логика и вычисления
# TODO объявляем их тут

# TODO пример алгоритма как в 02 задании, там только функции в цикле

while True:
    cprint('Игра "Быки и коровы"', color='red')
    herd = gather_herd()
    print(herd)
    counter = 1
    cprint('Отгадывает игрок', color='green')
    while True:
        user_input = input_number()
        herds = check(user_input, herd)
        cprint('Быков: {}'.format(herds[0]), color='yellow')
        cprint('Коров: {}'.format(herds[1]), color='yellow')
        if herds[0] == 4:
            break
        else:
            counter += 1
    cprint('Загаданное число {}'.format(herd), color='red')
    cprint('Сделано попыток {}'.format(counter), color='red')
    repeat = int(input('Хотите еще партию? Нажми 1, если да. Если нет то нажми 0: '))
    # TODO ничего не происходит!?
    if repeat == 1:
        continue
    else:
        break