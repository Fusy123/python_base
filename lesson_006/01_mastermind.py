# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера  
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import bulls_engine as eng
from termcolor import cprint, colored


def play_game():
    comp_number = eng.random_int()
    user_number = '0'
    count_games = 0

    cprint('Игра "Быки и коровы"', color='yellow')

    while eng.check_int(user_number) is False:
        user_number = input(colored('Введите четырехзначное число (число не должно начинаться с нуля и содержать '
                                    'повторяющихся цифр): ', color='red'))

    eng.convert(first_number=comp_number, second_number=user_number)

    total = eng.check_bulls_cows(comp=comp_number, user=user_number)

    while total['bulls'] != 4:
        print(colored('Текущий счет игры: Быки -', color='red'), colored(total['bulls'], color='yellow'),
              colored('Коровы -', color='red'), colored(total['cows'], color='yellow'), end='.\n')
        user_number = input('Вы не угадали. Попробуйте еще раз: ')
        while eng.check_int(user_number) is False:
            user_number = input('Вы не угадали. Попробуйте еще раз: ')
        count_games += 1
        total = eng.check_bulls_cows(comp=comp_number, user=user_number)

    if total['bulls'] == 4:
        count_games += 1
        print(colored('Текущий счет игры: Быки -', color='green'), colored(total['bulls'], color='yellow'),
              colored('Коровы -', color='red'), colored(total['cows'], color='yellow'), end='.\n')
        cprint('Поздравляем! Вы угадали число!', color='green', attrs=['bold'])
        print(colored('Вы угадали за', color='green', attrs=['bold']), colored(count_games, color='green',
                                                                               attrs=['bold']),
              colored('попыток', color='green', attrs=['bold']))

    question = input('Хотите сыграть еще одну партию? (y/n)')
    if question.lower() == 'y':
        play_game()
    else:
        print('Игра окончена. Удачи!')
        exit()


play_game()

# TODO функция play_game очень Большая ее нужно разбить на мелкие функции! Каждая функция будет отвечать за что то одно!

# TODO Как и писал ранее вот алгоритм: Всего 4 +\- функции в главном алгоритме!

# TODO просим_ввести_число_корректное() - это функция
# TODO получаем данные из функции, которая чекает число на результат и возвращает словарь
# TODO печатаем этот результат, тут что то result = check_bulls_cows()
# TODO увеличиваем число ходов
# TODO условие на победу и новую иру в виде двух функций:
# TODO Если выиграли_игру():
# TODO    новая_игра()

# TODO Все доп функции объявляем в этом модуле!
